用一个三元组(row,column,value)可唯一确定一个非零元素的值。
稀疏矩阵中的所有非零元素可以组成一个三元表，按照行优先顺序，将稀疏矩阵中的非零元素
存放在一个由三元组组成的数组中。

三元组节点
public class TripleNode{
	//M可以是任何的接口或对象
	
	public Integer row; //行号
	
	public Integer column; //列好
	
	//java 可用object 存储任何数据 的类型
	public Integer value; //数据

	public TripleNode(Integer row, Integer column, Integer value) {
		this.row = row;
		this.column = column;
		this.value = value;
	}

	public TripleNode() {
		
	}
}



稀疏矩阵顺序表

public class SparseMatrix {
	
	//设置数据类型的超类
	public TripleNode data[]; //三元组表
	
	public Integer rows; //行数
	
	public Integer cols; //列数
	
	public Integer nums; //非零元素的个数
	
	public SparseMatrix(int maxSize){
		
		data = new TripleNode[maxSize];
		
		for(int i = 0;i < data.length; i++){
			
			data[i] = new TripleNode();
			
		}
		rows = 0;
		cols = 0;
		nums = 0;
	}
	
	//初始化三元组从一个稀疏矩阵创建三元组M为泛型
	
	
	/**
	 * 初始化数字为整数类型的三元组
	 * @param mat
	 */
	public SparseMatrix(Integer mat[][]){
		//用以统计非零元素的个数
		int count = 0;
		//用以遍历三元组
		int k = 0;
		//1、首先初始化三元组的基本参数
		this.rows = mat.length;
		this.cols = mat[0].length;
		//2、计算非零元的个数
		for(int i = 0;i<rows;i++){
			for(int j = 0;j<cols;j++){
				//判断元素是否为零
				if(mat[i][j]!= 0){
					count++;
				}
			}
		}
		nums=count;
		data = new TripleNode[nums];
		for(int i = 0;i<rows;i++){
			for(int j = 0;j<cols;j++){
				//判断元素是否为零
				if(mat[i][j]!= 0){
					data[k] = new TripleNode(i, j, mat[i][j]);
					k++;
				}
			}
		}
	}
	/**
	 * 遍历数组
	 */
	public void printMatrix() {
		System.out.println("稀疏矩阵的三元组存储结构:");
		System.out.println("行数:"+this.rows+"\t列数:"+this.cols+"\t非零元素的个数:"+this.nums );
		System.out.println("行下标\t列下标\t元素值");
		for(int i = 0;i<data.length;i++){
			System.out.println(data[i].row+"\t"+data[i].column+"\t"+data[i].value);
		}
	}
	
	//矩阵的转置
	/**
	 * 静态方法
	 * @param sm
	 * @return
	 */
	public static SparseMatrix fasttranspose(SparseMatrix sm){
		
		//首先转置的时候行数和列数及非零元素的个数不会改变
		//1、创建一个新的三元组
		SparseMatrix nsm = new SparseMatrix(sm.nums);
		
		nsm.rows = sm.cols;
		nsm.cols = sm.rows;
		nsm.nums = sm.nums;
		
		//辅助变量
		int [] num,cpot;
		
		if(sm.nums!=0){
			//统计每列非零元素的个数
			num = new int[sm.cols];
			//统计每列非零元素首元素的位置
			cpot = new int[sm.cols];
			//统计每列非零元素的个数
			for(int i = 0;i<sm.nums;i++){
				Integer j = sm.data[i].column;
				num[j]++;
			}
			
			//初始化每列首个非零元素的位置
			cpot[0]=0;
			for(int i = 1;i<sm.cols;i++){
				cpot[i]=cpot[i-1]+num[i-1];
			}
			
			//执行转置
			for(int i=0;i<sm.nums;i++){
				//获取数据的列
				Integer cl = sm.data[i].column;
				//根据列来获取元素所在的位置
				int dr = cpot[cl];
				nsm.data[dr].row = sm.data[i].column;
				nsm.data[dr].column=sm.data[i].row;
				nsm.data[dr].value=sm.data[i].value;
				cpot[cl]++;
			}
		}
		
		
		return nsm;
		
	}
}
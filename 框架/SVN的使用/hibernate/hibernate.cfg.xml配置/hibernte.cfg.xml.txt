<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>
		<property name="show_sql">true</property>
		<property name="hbm2ddl.auto">update</property>
		<property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="connection.url">jdbc:mysql://localhost:3307/test1</property>
		<property name="connection.username">root</property>
		<property name="connection.password">123456</property>
		<!--加载配置文件-->
		<mapping class="com.sxt.bean.User"/>
		<mapping class="com.sxt.bean.Company1"/>
		<mapping class="com.sxt.bean.Address1"/>
		<mapping class="com.sxt.bean.Deptment"/>
		<mapping class="com.sxt.bean.Employee"/>
	</session-factory>
</hibernate-configuration>


1、<property name="hbm2ddl.auto">update</property>

  其主要作用:自动创建|更新|验证数据库表结构。如果不是此方面的需求建议 set value = "none"

	(1)create:每次加载hibernate时都会删除上一次的生成的表，然后根据model类再重新来生成
	表。
	(2)create-drop:每次加载hibernate时根据model类生成表，但是sessionFactory-关闭，表就自动
	自动删除
	(3)update: 第一次加载hibernate时根据model类会自动建立表结构(前提是先建立数据库)，以后加载
	hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行
	。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
	(4)validate:每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


































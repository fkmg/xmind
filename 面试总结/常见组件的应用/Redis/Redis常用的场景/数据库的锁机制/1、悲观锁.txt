因此，在整个数据处理过程中，将数据处于锁定

状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能

真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系

统不会修改数据）。

一个典型的倚赖数据库的悲观锁调用：

select * from account where name=”Erica” for update

这条 sql 语句锁定了 account 表中所有符合检索条件（ name=”Erica” ）的记录。

本次事务提交之前（事务提交时会释放事务过程中的锁），外界无法修改这些记录。


Hibernate 的悲观锁，也是基于数据库的锁机制实现。

注意，只有在查询开始之前（也就是 Hiberate 生成 SQL 之前）设定加锁，才会

真正通过数据库的锁机制进行加锁处理，否则，数据已经通过不包含 for update

子句的 Select SQL 加载进来，所谓数据库加锁也就无从谈起。

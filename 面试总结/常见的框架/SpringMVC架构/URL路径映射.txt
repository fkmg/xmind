1、@RequestMapping(value="/item")或@RequestMapping("/item”）
value的值是数组，可以将多个url映射到同一个方法

2、请求方法限定
限定GET方法
@RequestMapping(method = RequestMethod.GET)
如果通过Post访问则报错：
HTTP Status 405 - Request method 'POST' not supported
例如：
@RequestMapping(value="/editItem",method=RequestMethod.GET)
限定POST方法
@RequestMapping(method = RequestMethod.POST)
如果通过Post访问则报错：
HTTP Status 405 - Request method 'GET' not supported
GET和POST都可以
@RequestMapping(method={RequestMethod.GET,RequestMethod.POST})

3、controller方法返回值

3.1 返回ModelAndView controller方法中定义ModelAndView对象并返回，对象中可添加model数据，制定view

返回voie 在controller方法形参上可以定于request和response，使用request或response制定响应结果:
使用request转向页面,
request.getRequestDispatcher("页面路径").forward(request, response);
response.sendRedirect("url")

可以通过response制定响应结果，例如响应json数据如下:
response.setCharacterEncoding("utf-8");
response.setContentType("application/json;charset=utf-8");
response.getWriter().write("json串");

3.2返回逻辑视图名
controller方法返回字符串可以制定逻辑视图名，通过视图解析器解析为物理视图地址

Redirect重定向
Contrller方法返回结果重定向到一个url地址，参数无法传递

forward转发

forward方式相当于“request.getRequestDispatcher().forward(request,response)”，转发后浏览器地址栏还是原来的地址。转发并没有执行新的request和response，而是和转发前的请求共用一个request和response。
所以转发前请求的参数在转发后仍然可以读取到。

重定向与请求转发的区别:
1、使用相对路径请求转发与重定向没有区别
2、使用绝对路径时，根/路径代表了不同含义
重定向response.sendRedirect("xxx")是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。/指的Tomcat的根目录,写绝对路径应该写成"/当前Web程序根名称/资源名" 
转发是在服务器内部进行的，写绝对路径/开头指的是当前的Web应用程序。绝对路径写法就是"/login.jsp"或"/servlet/LoginServlet"

2、请求转发在客户端浏览器地址栏中不会显示出转向后的地址;而重定向会得到跳转的地址，实际上
重定向会向服务器端发送两个请求

3、forward()更加高效，在可以满足需求时，尽量使用RequestDispatcher.forward()方法。

4、重定向可以跨域访问，而转发是在web服务器内部经行的









































